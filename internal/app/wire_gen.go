// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"be/config"
	"be/internal/infrastructure/cache/redis"
	"be/internal/infrastructure/database/elasticsearch"
	"be/internal/infrastructure/database/mongo"
	"be/internal/infrastructure/database/postgres"
	"be/internal/infrastructure/database/repository"
	"be/internal/infrastructure/message_queue/rabbitmq"
	"be/internal/service"
	"be/internal/transport/http/handler"
	"be/internal/transport/http/middleware"
	"be/internal/transport/http/router"
	"be/pkg/fluent"
	"be/pkg/logger"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApplication() (App, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return App{}, err
	}
	fluentFluent, err := fluent.NewFluent(configConfig)
	if err != nil {
		return App{}, err
	}
	zapLogger, err := logger.NewLogger(configConfig, fluentFluent)
	if err != nil {
		return App{}, err
	}
	postgresDB, err := postgres.NewDB(configConfig, zapLogger)
	if err != nil {
		return App{}, err
	}
	iUserRepository := repository.NewUserRepository(postgresDB, zapLogger)
	redisCache, err := redis.NewCache(configConfig, zapLogger)
	if err != nil {
		return App{}, err
	}
	iAuthService := service.NewAuthService(iUserRepository, configConfig, zapLogger, redisCache)
	authHandler := handler.NewAuthHandler(iAuthService, zapLogger)
	routerRouter := router.NewRouter(authHandler)
	middlewareMiddleware := middleware.NewMiddleware(configConfig, zapLogger)
	server := NewServer(configConfig, zapLogger)
	mongoDB, err := mongo.NewDB(configConfig, zapLogger)
	if err != nil {
		return App{}, err
	}
	elasticsearchDB, err := elasticsearch.NewDB(configConfig, zapLogger)
	if err != nil {
		return App{}, err
	}
	rabbitQueue, err := rabbitmq.NewQueue(configConfig, zapLogger)
	if err != nil {
		return App{}, err
	}
	consumer := rabbitmq.NewConsumer(rabbitQueue, zapLogger)
	producer, err := rabbitmq.NewProducer(rabbitQueue, zapLogger)
	if err != nil {
		return App{}, err
	}
	app := App{
		Config:           configConfig,
		Router:           routerRouter,
		Middleware:       middlewareMiddleware,
		Server:           server,
		Log:              zapLogger,
		Fluent:           fluentFluent,
		Postgres:         postgresDB,
		Mongo:            mongoDB,
		Elasticsearch:    elasticsearchDB,
		Redis:            redisCache,
		RabbitMQQueue:    rabbitQueue,
		RabbitMQConsumer: consumer,
		RabbitMQProducer: producer,
	}
	return app, nil
}

// wire.go:

// Log Set
var logSet = wire.NewSet(fluent.NewFluent, logger.NewLogger)

// Config Set
var configSet = wire.NewSet(config.NewConfig)

// Infra Set
var dbSet = wire.NewSet(postgres.NewDB, mongo.NewDB, elasticsearch.NewDB)

var cacheSet = wire.NewSet(redis.NewCache)

var queueSet = wire.NewSet(rabbitmq.NewQueue, rabbitmq.NewConsumer, rabbitmq.NewProducer)

// Handler Set
var handlerSet = wire.NewSet(handler.NewAuthHandler)

// Service Set
var serviceSet = wire.NewSet(service.NewAuthService)

// Repository Set
var repositorySet = wire.NewSet(repository.NewUserRepository)

// Router Set
var routerSet = wire.NewSet(router.NewRouter)

// Middleware Set
var middlewareSet = wire.NewSet(middleware.NewMiddleware)

// Server Set
var serverSet = wire.NewSet(NewServer)
